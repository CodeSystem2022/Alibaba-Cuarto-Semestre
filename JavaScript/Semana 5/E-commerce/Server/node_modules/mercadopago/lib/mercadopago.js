var request = require ("superagent"),
	events = require ("events");

var config = {
	API_BASE_URL: "https://api.mercadolibre.com",
	MIME_JSON: "application/json",
	MIME_FORM: "application/x-www-form-urlencoded"
};

MP = function (clientId, clientSecret) {
	events.EventEmitter.call(this);

	this.__clientId = clientId;
	this.__clientSecret = clientSecret;

	this.__getAccessToken = function () {
		var self = this;

		request
			.post(config.API_BASE_URL + "/oauth/token")
			.set('Accept', config.MIME_JSON)
			.set('Content-type', config.MIME_FORM)
			.send({
				"client_id": this.__clientId,
				"client_secret": this.__clientSecret,
				"grant_type": "client_credentials"
			})
			.end(function(res){
				if (res.ok) {
					self.emit ("authorized", res.body.access_token);
				} else {
					self.emit ("fail", res.text);
				}
			});

		return self;
	};

	/**
	Get information for specific payment
	@param id
	@return json
	*/    
	this.getPaymentInfo = function (id) {
    	var self = this;

		this.__getAccessToken ()
			.once ("authorized", function (accessToken){
				request
					.get (config.API_BASE_URL + "/collections/notifications/"+id+"?access_token="+accessToken)
					.set('Accept', config.MIME_JSON)
					.set('Content-type', config.MIME_JSON)
					.send()
					.end(function(res){
						if (res.ok) {
							self.emit ("success", {
								"status": res.statusCode,
								"response": res.body
							});
							self.removeAllListeners("success");
						} else {
							self.emit ("error", {
								"status": res.statusCode,
								"response": res.body || res.text
							});
							self.removeAllListeners("error");
						}
					});
			})
			.once ("fail", function (error){
				self.emit ("error", error);
			});
		
		return self;
	};

	/**
	Search payments according to filters, with pagination
	@param filters
	@param offset
	@param limit
	@return json
	*/
	this.searchPayment = function (filters, offset, limit) {
    	var self = this;

		filters.offset = offset || 0;
		filters.limit = limit || 0;

		this.__getAccessToken ()
			.once ("authorized", function (accessToken){
				filters.access_token = accessToken;

				request
					.get (config.API_BASE_URL + "/collections/search?"+this.__build_query(filters))
					.set('Accept', config.MIME_JSON)
					.set('Content-type', config.MIME_JSON)
					.send()
					.end(function(res){
						if (res.ok) {
							self.emit ("success", {
								"status": res.statusCode,
								"response": res.body
							});
							self.removeAllListeners("success");
						} else {
							self.emit ("error", {
								"status": res.statusCode,
								"response": res.body || res.text
							});
							self.removeAllListeners("error");
						}
					});
			})
			.once ("fail", function (error){
				self.emit ("error", error);
			});

		return self;
	};

    /**
    Create a checkout preference
    @param preference
    @return json
    */
    this.createPreference = function (preference){
    	var self = this;

		this.__getAccessToken ()
			.once ("authorized", function (accessToken){
				request
					.post (config.API_BASE_URL + "/checkout/preferences?access_token="+accessToken)
					.set('Accept', config.MIME_JSON)
					.set('Content-type', config.MIME_JSON)
					.send(preference)
					.end(function(res){
						if (res.ok) {
							self.emit ("success", {
								"status": res.statusCode,
								"response": res.body
							});
							self.removeAllListeners("success");
						} else {
							self.emit ("error", {
								"status": res.statusCode,
								"response": res.body || res.text
							});
							self.removeAllListeners("error");
						}
					});
			})
			.once ("fail", function (error){
				self.emit ("error", error);
			});

		return self;
    };

	/**
	Update a checkout preference
	@param id
	@param preference
	@return json
	*/
	this.updatePreference = function (id, preference) {
    	var self = this;

		this.__getAccessToken ()
			.once ("authorized", function (accessToken){
				request
					.put (config.API_BASE_URL + "/checkout/preferences/"+id+"?access_token="+accessToken)
					.set('Accept', config.MIME_JSON)
					.set('Content-type', config.MIME_JSON)
					.send(preference)
					.end(function(res){
						if (res.ok) {
							self.emit ("success", {
								"status": res.statusCode,
								"response": res.body
							});
							self.removeAllListeners("success");
						} else {
							self.emit ("error", {
								"status": res.statusCode,
								"response": res.body || res.text
							});
							self.removeAllListeners("error");
						}
					});
			})
			.once ("fail", function (error){
				self.emit ("error", error);
			});

		return self;
	};

	/**
	Update a checkout preference
	@param id
	@param preference
	@return json
	*/
	this.getPreference = function (id) {
    	var self = this;

		this.__getAccessToken ()
			.once ("authorized", function (accessToken){
				request
					.get (config.API_BASE_URL + "/checkout/preferences/"+id+"?access_token="+accessToken)
					.set('Accept', config.MIME_JSON)
					.set('Content-type', config.MIME_JSON)
					.send()
					.end(function(res){
						if (res.ok) {
							self.emit ("success", {
								"status": res.statusCode,
								"response": res.body
							});
							self.removeAllListeners("success");
						} else {
							self.emit ("error", {
								"status": res.statusCode,
								"response": res.body || res.text
							});
							self.removeAllListeners("error");
						}
					});
			})
			.once ("fail", function (error){
				self.emit ("error", error);
			});

		return self;
	};

	/*************************************************************************/
	this.__build_query = function (params) {
		var elements = []

		for (var key in params) {
			if (params[key] == null) {
				params[key] = "";
			}

			elements.push(key+"="+escape(params[key]));
		}

		return elements.join("&");
	}
}

MP.prototype = Object.create (events.EventEmitter.prototype);

module.exports = MP;